Event
웹상에서의 일어나는 모든 행위!!

개발자툴
Source: Event Listener

계속 듣고 싶다면
on + (Event)
즉 앞에 on만 붙이면 된다!

예) Source안에 있는 Event Listener의 것들 중에 앞에 on을 붙이면 된다!

f12로 가서 console에 한번 나중에 써봐라!!
document.onclick = () => console.log("DOCUMENT CLICKED")

초기화!
document.onclick = () => {}

영상 잡아보기!!
document.getElementsByTagName('video')[0]
document.getElementsByTagName('video')[0].getCurrentTime()
기타 등등 가능

document.getElementsByTagName('video')[0].onfocus = () => console.log("Video Focused")

Event Handling
1. state를 만든다
2. Handling 함수를 만든다
3. 이벤트가 발생하는 HTML 태그에서 onEvent명을 통해 handling 함수를 부른다!
(onEvent는 카멜 방식으로 작성!!)


실습!!!!!!!!!! (state는 그냥 넘어갈 수 있음!!)
시간이 계속 늘어나는데, 버튼을 누르면 멈추게!!

1. state안에 stop을 만든다!
this.state = {
          hour: this.props.time,
          minute: 0,
          stop: false,
      } //상태를 저장할 수 있다!!


2. 하나의 함수를 만든다! 근데 만들때 일단 arrow함수로 만든다!
handlingClick = () => {
    
}

3. 
handlingClick = (event) => {
    console.log(event.target) //event.target이 뭔지 보기 위해서
    this.setState({stop: event.target.value}) //event.target.value 이거는 외워야 된다고 한다!
}

4. render에 버튼을 하나 만든다! {}여기서 중괄호 의미는 여기에 javascript언어를 쓰겠다라는 말!!
render(){
      return(
    <div className={"WorldClock"}>
      <h2>도시 : {this.props.city}</h2> 
      <p>시간 : {this.state.hour}시 {this.state.minute}분</p>
      <button onClick={this.handlingClick}>멈춰!</button>  //버튼을 클릭하면 handlingClick이라는 함수가 실행된다!
    </div>
  );
  }

5. 이러면 버튼이 생기며 클리하면 handlingClick가 실행되어! console.log(event.target)가 콘솔에 나온다!

6. button 안에 value를 넣어줘서 value를 건내주자!
render(){
      return(
    <div className={"WorldClock"}>
      <h2>도시 : {this.props.city}</h2> 
      <p>시간 : {this.state.hour}시 {this.state.minute}분</p>
      <button value={true} onClick={this.handlingClick}>멈춰!</button>  //버튼을 클릭하면 handlingClick이라는 함수가 실행된다!
    </div>
  );
  }

7. 이제 setInterval을 멈추게 만들자!! setInterval을 this.timer로 넣는다
this.timer = setInterval(()=>{
        this.setState((state)=>(
            state.minute === 59 ? state.hour === 23 ? {hour:-1} : {hour: state.hour + 1,minute: 0,} : {minute: state.minute+1} // 삼항연산자!!
          )
        ) //1초마다 1분씩 늘어나게 만든다!! 일단 애매한게 (state)는 감싼다고 치자! 근데 왜 ({minute:state.minute+1})을 또 감쌈?
}, 10)

8. setInterval을 멈추기 위해서는 setInterval을 변수로 만들고(this.timer) clearInterval함수 안에 setInterval변수를 넣어줘야된다고 한다!
handlingClick = (event) => {
    console.log(event.target.value)
    this.setState({stop: event.target.value})
    clearInterval(this.timer)
  }

-----

더욱더 바꾸기 위해서 App 컴포넌트를 class로 바꿔야된다!
1. function을 class로 바꾼다!
class App extends React.Component

2. constructor라는 것을 만든다!
constructor(props){
    super(props) //선언을 한다

}

3. constructor안에 this로 바꾼뒤 넣어준다
constructor(props){
    super(props) //선언을 한다
    this.cityTimeDate = [ //변하는 녀석을 이렇게 만들어서 처리를 한다
        ['서울', 10],
        ['부산', 10],
        ['베이징', 9],
        ['시드니', 12],
        ['LA', 17]
    ]
}

4. worldClockList를 그대로 cityTimeDate.map .... 하는 것을 가져와서 {}안에 직접 집어넣는다!
  
  const WorldClockList = cityTimeDate.map((citytime, index)=><WorldClock city={citytime[0]} time={citytime[1]} key={index}/>)
  
  return (
  <div className="App">
  <h1 className={'myStyle'}>안녕하세요</h1> 
      <div className={'post'}>
      첫 게시글 입니다!
      </div>
      {WorldClockList}
  </div>
  );
}

5. 넣기!!
  return (
  <div className="App">
  <h1 className={'myStyle'}>안녕하세요</h1> 
      <div className={'post'}>
      첫 게시글 입니다!
      </div>
      {cityTimeDate.map((citytime, index)=><WorldClock city={citytime[0]} time={citytime[1]} key={index}/>)}
  </div>
  );
}

6. 그런후 city앞에 this.를 붙인다!
{this.cityTimeDate.map((citytime, index)=><WorldClock city={citytime[0]} time={citytime[1]} key={index}/>)}


7. 마지막으로 render함수를 붙여준다
render(){
  return (
  <div className="App">
  <h1 className={'myStyle'}>안녕하세요</h1> 
      <div className={'post'}>
      첫 게시글 입니다!
      </div>
      {this.cityTimeDate.map((citytime, index)=><WorldClock city={citytime[0]} time={citytime[1]} key={index}/>)}
  </div>
  );
}

변경완료!!!
class App extends React.Component {
  constructor(props){
    super(props)
    this.cityTimeDate = [ //변하는 녀석을 이렇게 만들어서 처리를 한다
      ['서울', 10],
      ['부산', 10],
      ['베이징', 9],
      ['시드니', 12],
      ['LA', 17]
  ]
}
render(){
  return (
  <div className="App">
  <h1 className={'myStyle'}>안녕하세요</h1> 
      <div className={'post'}>
      첫 게시글 입니다!
      </div>
      {this.cityTimeDate.map((citytime, index)=><WorldClock city={citytime[0]} time={citytime[1]} key={index}/>)}
  </div>
  );
}
}

-----

게시글을 쓸 수 있도록 textarea를 넣어보자
1.
render(){
  return (
  <div className="App">
  <h1 className={'myStyle'}>안녕하세요</h1> 
      <div className={'post'}>
      첫 게시글 입니다!
      <textarea></textarea>  <----------이거를 넣어주자!
      </div>
      {this.cityTimeDate.map((citytime, index)=><WorldClock city={citytime[0]} time={citytime[1]} key={index}/>)}
  </div>
  );
}
}

2. 실험을 위해서 textarea안에 value를 넣어보자!! 넣으면 안바뀐다!!
<textarea value={"안녕하세요"}></textarea>

3. eventHandler를 만들어보자!! constructor안에!!
1단계 : state를 만든다!!
this.state = {
    content: ''
}

2단계 : handling함수를 만든다!!
handlingChange = (event) => {}

만든 후 이벤트를 했을경우 state가 변화해야되서 setState로 content의 상태를 변경 시킨닷!!
handlingChange = (event) => {
  this.setState({content: event.target.value})
}

3단계 : 이벤트가 발생하는 HTML 태그에서 onEvent명을 통해 handling 함수를 부른다! 또한 "안녕하세요"의 value를 this.state.content로 바꾼다!!
<textarea value={this.state.content} onChange={this.handlingChange}></textarea>

4. 완성본
class App extends React.Component {
  constructor(props){
    super(props)
    this.cityTimeDate = [ //변하는 녀석을 이렇게 만들어서 처리를 한다
      ['서울', 10],
      ['부산', 10],
      ['베이징', 9],
      ['시드니', 12],
      ['LA', 17]
    ]
  this.state = {
    content: ''
  }
}

handlingChange = (event) => {
  this.setState({content: event.target.value})
}

render(){
  return (
  <div className="App">
  <h1 className={'myStyle'}>안녕하세요</h1> 
      <div className={'post'}>
      첫 게시글 입니다!
      <textarea value={this.state.content} onChange={this.handlingChange}></textarea>
      </div>
      {this.cityTimeDate.map((citytime, index)=><WorldClock city={citytime[0]} time={citytime[1]} key={index}/>)}
  </div>
  );
}
}

5. 즉 이뜻은 바뀔때마다 state에 있는 content의 값이 계속 바뀐다라는 뜻

